
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;



/*
* To change this template, choose Tools | Templates
* and open the template in the editor.
*/

/**
 *
 * @author 499326
 */
public class FrameMain extends javax.swing.JFrame {
    
    /**
     * Creates new form FrameMain
     */
    //creates hashtable
    private static int numBuckets = 2;//bucket used in hash table, can be changed
    private static MyHashTable employeeHashTable = new MyHashTable (numBuckets);
    //getter method for hash table
    public static MyHashTable getEmployeeHashTable (){
        return employeeHashTable;
    }
    
    
    public FrameMain() {
        initComponents();
        
        //popup appears if user tries to close window
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                int selectedOption = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to close the window?",
                        "EXIT",
                        JOptionPane.YES_NO_OPTION);
                //if user clicks yes, program closes
                if (selectedOption == JOptionPane.YES_OPTION) {
                    e.getWindow().dispose();
                }
            }
        });
        
    }
    
    
    //method isInteger checks if input is integer and returns true or false
    public static boolean isInteger(String inputString) {
        try
        {
            Integer.parseInt(inputString);
        }
        catch(NumberFormatException e)//not an integer
        {
            return false;
        }
        catch(NullPointerException e)//not a null
        {
            return false;
        }
        //if did not return false, is an integer
        return true;
    }
    
    //method isDouble checks if input is real then reutrns true or false
    public static boolean isDouble(String inputString){
        try
        {
            Double.parseDouble(inputString);
        }
        catch(NumberFormatException e) {
            return false; //not a double
        }
        catch(NullPointerException e) {
            return false;//not a null
        }
        return true;//if did not return false, is a double
    }
    
    //Method used to round to two digits after decimal
    public static double roundTwoDecimals(double d) {
        DecimalFormat twoDecimals = new DecimalFormat("#.##");
        return Double.valueOf(twoDecimals.format(d));
    }
    
    //Clears hash table
    public void clearHashTable (MyHashTable hashTable){
        //makes new hashtable and replaces old hashtable with new empty hashtable
        MyHashTable tempHashTable = new MyHashTable (numBuckets);
        employeeHashTable = tempHashTable;
    }
    
    //Gets first word of a string before a space
    public static String getFirstWord(String text) {
        if (text.indexOf(' ') > -1) { //Checks if there is more than one word
            return text.substring(0, text.indexOf(' ')); //Extracts first word
        } else {
            return text; //Returns whole string since there's only one word
        }
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonMainAdd = new javax.swing.JButton();
        buttonMainSave = new javax.swing.JButton();
        buttonMainDisplay = new javax.swing.JButton();
        labelMainTitle = new javax.swing.JLabel();
        buttonMainExit = new javax.swing.JButton();
        buttonMainLoad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        buttonMainAdd.setText("Add");
        buttonMainAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMainAddActionPerformed(evt);
            }
        });

        buttonMainSave.setText("Save");
        buttonMainSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMainSaveActionPerformed(evt);
            }
        });

        buttonMainDisplay.setText("Display");
        buttonMainDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMainDisplayActionPerformed(evt);
            }
        });

        labelMainTitle.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        labelMainTitle.setText("Welcome to the Employee Database!");

        buttonMainExit.setText("Exit");
        buttonMainExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMainExitActionPerformed(evt);
            }
        });

        buttonMainLoad.setText("Load");
        buttonMainLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMainLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelMainTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonMainExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonMainLoad, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(buttonMainAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonMainDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonMainSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelMainTitle)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonMainSave, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonMainAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonMainDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonMainLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonMainExit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void buttonMainAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMainAddActionPerformed
        //opens add frame
        dispose();
        new FrameAdd().setVisible(true);
    }//GEN-LAST:event_buttonMainAddActionPerformed
    
    private void buttonMainSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMainSaveActionPerformed
        //opens up save frame
        dispose();
        new FrameSave().setVisible(true);
    }//GEN-LAST:event_buttonMainSaveActionPerformed
    
    private void buttonMainDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMainDisplayActionPerformed
        //closes main frame
        dispose();
        //opens display frame
        new FrameDisplay().setVisible(true);
    }//GEN-LAST:event_buttonMainDisplayActionPerformed
    
    private void buttonMainExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMainExitActionPerformed
        // closes program
        //popup appears if user tries to close window
        int selectedOption = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to close the window?",
                "EXIT",
                JOptionPane.YES_NO_OPTION);
        //if user clicks yes, program closes
        if (selectedOption == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_buttonMainExitActionPerformed
    
    private void buttonMainLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMainLoadActionPerformed
        //clears current hash table
        clearHashTable(employeeHashTable);
        
        BufferedReader reader = null;
        try {
            //retrieves information from file
            reader = new BufferedReader(new FileReader("Employee_Info_Centre_Save.txt"));
            try {
                StringBuilder sBuilder = new StringBuilder();
                String line = reader.readLine();
                while (line != null) {
                    
                    if (line.equals("%%%PT%%%")) { //employee is part time
                        System.out.println("IN PART TIME");
                        //stores information in variables
                        int employeeNumber = Integer.valueOf(reader.readLine());
                        String firstName = reader.readLine();
                        String lastName = reader.readLine();
                        int sex = Integer.valueOf(reader.readLine());
                        int workLocation = Integer.valueOf(reader.readLine());
                        double deductionsRate = Double.valueOf(reader.readLine());
                        double hourlyWage = Double.valueOf(reader.readLine());
                        double hoursPerWeek = Double.valueOf(reader.readLine());
                        double weeksPerYear = Double.valueOf(reader.readLine());
                        //makes new part time employee and adds to hash table
                        PartTimeEmployee newPartTimeEmployee = new PartTimeEmployee (employeeNumber, firstName, lastName, sex, workLocation, deductionsRate, hourlyWage, hoursPerWeek, weeksPerYear);
                        employeeHashTable.addEmployee(newPartTimeEmployee);
                    }
                    else if (line.equals("%%%FT%%%")) { //employee is full time
                        System.out.println("IN FULL TIME");
                        //stores information invariables
                        int employeeNumber = Integer.valueOf(reader.readLine());
                        String firstName = reader.readLine();
                        String lastName = reader.readLine();
                        int sex = Integer.valueOf(reader.readLine());
                        int workLocation = Integer.valueOf(reader.readLine());
                        double deductionsRate = Double.valueOf(reader.readLine());
                        double annualSalary = Double.valueOf(reader.readLine());
                        //makes new full time employee and adds to hash table
                        FullTimeEmployee newFullTimeEmployee = new FullTimeEmployee (employeeNumber, firstName, lastName, sex, workLocation, deductionsRate, annualSalary);
                        employeeHashTable.addEmployee(newFullTimeEmployee);
                    }
                    line = reader.readLine();
                }
                //String everything = sBuilder.toString();
            } catch (IOException ex) {
                Logger.getLogger(FrameMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException e) {
                System.err.println(e);
            } finally {
                try {
                    reader.close();
                } catch (IOException ex) {
                    Logger.getLogger(FrameMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrameMain.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(FrameMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonMainLoadActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMain().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonMainAdd;
    private javax.swing.JButton buttonMainDisplay;
    private javax.swing.JButton buttonMainExit;
    private javax.swing.JButton buttonMainLoad;
    private javax.swing.JButton buttonMainSave;
    private javax.swing.JLabel labelMainTitle;
    // End of variables declaration//GEN-END:variables
}