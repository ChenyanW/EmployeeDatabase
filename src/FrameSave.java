
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;

/**
 *
 * @author 499326
 */
public class FrameSave extends javax.swing.JFrame {
    
    /**
     * Creates new form FrameSave
     */
    public FrameSave() {
        initComponents();
        
        //popup appears if user tries to close window
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                int selectedOption = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to close the window?",
                        "EXIT",
                        JOptionPane.YES_NO_OPTION);
                //if user clicks yes, program closes
                if (selectedOption == JOptionPane.YES_OPTION) {
                    e.getWindow().dispose();
                }
            }
        });
        
        panelSaveMessage.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSaveTitle = new javax.swing.JLabel();
        buttonSaveExit = new javax.swing.JButton();
        labelSaveQuestion = new javax.swing.JLabel();
        buttonSaveSave = new javax.swing.JButton();
        panelSaveMessage = new javax.swing.JPanel();
        labelSaveMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        labelSaveTitle.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        labelSaveTitle.setText("Save Employee Information");

        buttonSaveExit.setText("Exit");
        buttonSaveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveExitActionPerformed(evt);
            }
        });

        labelSaveQuestion.setFont(new java.awt.Font("Microsoft YaHei", 1, 14)); // NOI18N
        labelSaveQuestion.setText("Are you sure you want to save?");

        buttonSaveSave.setText("Save");
        buttonSaveSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveSaveActionPerformed(evt);
            }
        });

        panelSaveMessage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelSaveMessage.setText("ERROR: No employees found, information saved.");

        javax.swing.GroupLayout panelSaveMessageLayout = new javax.swing.GroupLayout(panelSaveMessage);
        panelSaveMessage.setLayout(panelSaveMessageLayout);
        panelSaveMessageLayout.setHorizontalGroup(
            panelSaveMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSaveMessageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelSaveMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSaveMessageLayout.setVerticalGroup(
            panelSaveMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSaveMessageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelSaveMessage)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelSaveQuestion))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSaveSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSaveExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(panelSaveMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelSaveTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelSaveTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSaveQuestion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSaveMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSaveSave)
                    .addComponent(buttonSaveExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void buttonSaveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveExitActionPerformed
        //closes save window and reopens main window
        dispose();
        new FrameMain().setVisible(true);
    }//GEN-LAST:event_buttonSaveExitActionPerformed
    
    private void buttonSaveSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveSaveActionPerformed
        //writes to text file then opens save window
        boolean saveError;//stores whether there is an error saving
        try{//writes to text file Employee_Info_Centre_Save.txt
            PrintWriter writer = new PrintWriter("Employee_Info_Centre_Save.txt", "UTF-8");
            for (int i = 0; i < FrameMain.getEmployeeHashTable().getBuckets().length; i++)
            {
                for (int j = 0; j < FrameMain.getEmployeeHashTable().getBuckets()[i].size(); j++)
                {
                    if (FrameMain.getEmployeeHashTable().getBuckets()[i].get(j) instanceof PartTimeEmployee) {
                        //employee is part time
                        writer.println("%%%PT%%%");
                    }
                    else if (FrameMain.getEmployeeHashTable().getBuckets()[i].get(j) instanceof FullTimeEmployee) {
                        //employee is full time
                        writer.println("%%%FT%%%");
                    }
                    
                    writer.println(FrameMain.getEmployeeHashTable().getBuckets()[i].get(j).getEmployeeNumber());
                    writer.println(FrameMain.getEmployeeHashTable().getBuckets()[i].get(j).getFirstName());
                    writer.println(FrameMain.getEmployeeHashTable().getBuckets()[i].get(j).getLastName());
                    writer.println(FrameMain.getEmployeeHashTable().getBuckets()[i].get(j).getSex());
                    writer.println(FrameMain.getEmployeeHashTable().getBuckets()[i].get(j).getWorkLocation());
                    writer.println(FrameMain.getEmployeeHashTable().getBuckets()[i].get(j).getDeductionsRate());
                    if (FrameMain.getEmployeeHashTable().getBuckets()[i].get(j) instanceof PartTimeEmployee) {
                        //if employee is part time
                        writer.println(((PartTimeEmployee)FrameMain.getEmployeeHashTable().getBuckets()[i].get(j)).getHourlyWage());
                        writer.println(((PartTimeEmployee)FrameMain.getEmployeeHashTable().getBuckets()[i].get(j)).getHoursPerWeek());
                        writer.println(((PartTimeEmployee)FrameMain.getEmployeeHashTable().getBuckets()[i].get(j)).getWeeksPerYear());
                        
                    }
                    else if (FrameMain.getEmployeeHashTable().getBuckets()[i].get(j) instanceof FullTimeEmployee) {
                        //if employee is full time
                        writer.println(((FullTimeEmployee)FrameMain.getEmployeeHashTable().getBuckets()[i].get(j)).getAnnualSalary());
                    }
                }
            }
            writer.println("%%%%%");//indicates end of file
            writer.close();//closes file
            saveError = false;
        } catch (IOException e) {//if there's an error
            //error message will display
            saveError = true;
        }
        
        //displays error message if there is a save error
        if (saveError == true){
            labelSaveMessage.setText("ERROR: Unable to save.");
            panelSaveMessage.setVisible(true);
        }
        else {
            //if there is no error saving, displays a message indicating that information has been saved
            labelSaveMessage.setText("Information saved.");
            panelSaveMessage.setVisible(true);
        }
    }//GEN-LAST:event_buttonSaveSaveActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameSave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameSave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameSave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameSave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameSave().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSaveExit;
    private javax.swing.JButton buttonSaveSave;
    private javax.swing.JLabel labelSaveMessage;
    private javax.swing.JLabel labelSaveQuestion;
    private javax.swing.JLabel labelSaveTitle;
    private javax.swing.JPanel panelSaveMessage;
    // End of variables declaration//GEN-END:variables
}
